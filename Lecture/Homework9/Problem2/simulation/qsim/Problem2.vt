// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2019 20:38:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Problem2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Problem2_vlg_sample_tst(
	Clock,
	Resetn,
	Stop1,
	Stop2,
	sampler_tx
);
input  Clock;
input  Resetn;
input  Stop1;
input  Stop2;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or Resetn or Stop1 or Stop2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Problem2_vlg_check_tst (
	Dice1,
	Dice2,
	DIG0,
	DIG1,
	sampler_rx
);
input [2:0] Dice1;
input [2:0] Dice2;
input [3:0] DIG0;
input [3:0] DIG1;
input sampler_rx;

reg [2:0] Dice1_expected;
reg [2:0] Dice2_expected;
reg [3:0] DIG0_expected;
reg [3:0] DIG1_expected;

reg [2:0] Dice1_prev;
reg [2:0] Dice2_prev;
reg [3:0] DIG0_prev;
reg [3:0] DIG1_prev;

reg [2:0] Dice1_expected_prev;
reg [2:0] Dice2_expected_prev;
reg [3:0] DIG0_expected_prev;
reg [3:0] DIG1_expected_prev;

reg [2:0] last_Dice1_exp;
reg [2:0] last_Dice2_exp;
reg [3:0] last_DIG0_exp;
reg [3:0] last_DIG1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Dice1_prev = Dice1;
	Dice2_prev = Dice2;
	DIG0_prev = DIG0;
	DIG1_prev = DIG1;
end

// update expected /o prevs

always @(trigger)
begin
	Dice1_expected_prev = Dice1_expected;
	Dice2_expected_prev = Dice2_expected;
	DIG0_expected_prev = DIG0_expected;
	DIG1_expected_prev = DIG1_expected;
end


// expected Dice1[ 2 ]
initial
begin
	Dice1_expected[2] = 1'bX;
end 
// expected Dice1[ 1 ]
initial
begin
	Dice1_expected[1] = 1'bX;
end 
// expected Dice1[ 0 ]
initial
begin
	Dice1_expected[0] = 1'bX;
end 
// expected Dice2[ 2 ]
initial
begin
	Dice2_expected[2] = 1'bX;
end 
// expected Dice2[ 1 ]
initial
begin
	Dice2_expected[1] = 1'bX;
end 
// expected Dice2[ 0 ]
initial
begin
	Dice2_expected[0] = 1'bX;
end 
// expected DIG0[ 3 ]
initial
begin
	DIG0_expected[3] = 1'bX;
end 
// expected DIG0[ 2 ]
initial
begin
	DIG0_expected[2] = 1'bX;
end 
// expected DIG0[ 1 ]
initial
begin
	DIG0_expected[1] = 1'bX;
end 
// expected DIG0[ 0 ]
initial
begin
	DIG0_expected[0] = 1'bX;
end 
// expected DIG1[ 3 ]
initial
begin
	DIG1_expected[3] = 1'bX;
end 
// expected DIG1[ 2 ]
initial
begin
	DIG1_expected[2] = 1'bX;
end 
// expected DIG1[ 1 ]
initial
begin
	DIG1_expected[1] = 1'bX;
end 
// expected DIG1[ 0 ]
initial
begin
	DIG1_expected[0] = 1'bX;
end 
// generate trigger
always @(Dice1_expected or Dice1 or Dice2_expected or Dice2 or DIG0_expected or DIG0 or DIG1_expected or DIG1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Dice1 = %b | expected Dice2 = %b | expected DIG0 = %b | expected DIG1 = %b | ",Dice1_expected_prev,Dice2_expected_prev,DIG0_expected_prev,DIG1_expected_prev);
	$display("| real Dice1 = %b | real Dice2 = %b | real DIG0 = %b | real DIG1 = %b | ",Dice1_prev,Dice2_prev,DIG0_prev,DIG1_prev);
`endif
	if (
		( Dice1_expected_prev[0] !== 1'bx ) && ( Dice1_prev[0] !== Dice1_expected_prev[0] )
		&& ((Dice1_expected_prev[0] !== last_Dice1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dice1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dice1_expected_prev);
		$display ("     Real value = %b", Dice1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dice1_exp[0] = Dice1_expected_prev[0];
	end
	if (
		( Dice1_expected_prev[1] !== 1'bx ) && ( Dice1_prev[1] !== Dice1_expected_prev[1] )
		&& ((Dice1_expected_prev[1] !== last_Dice1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dice1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dice1_expected_prev);
		$display ("     Real value = %b", Dice1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dice1_exp[1] = Dice1_expected_prev[1];
	end
	if (
		( Dice1_expected_prev[2] !== 1'bx ) && ( Dice1_prev[2] !== Dice1_expected_prev[2] )
		&& ((Dice1_expected_prev[2] !== last_Dice1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dice1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dice1_expected_prev);
		$display ("     Real value = %b", Dice1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dice1_exp[2] = Dice1_expected_prev[2];
	end
	if (
		( Dice2_expected_prev[0] !== 1'bx ) && ( Dice2_prev[0] !== Dice2_expected_prev[0] )
		&& ((Dice2_expected_prev[0] !== last_Dice2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dice2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dice2_expected_prev);
		$display ("     Real value = %b", Dice2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dice2_exp[0] = Dice2_expected_prev[0];
	end
	if (
		( Dice2_expected_prev[1] !== 1'bx ) && ( Dice2_prev[1] !== Dice2_expected_prev[1] )
		&& ((Dice2_expected_prev[1] !== last_Dice2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dice2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dice2_expected_prev);
		$display ("     Real value = %b", Dice2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dice2_exp[1] = Dice2_expected_prev[1];
	end
	if (
		( Dice2_expected_prev[2] !== 1'bx ) && ( Dice2_prev[2] !== Dice2_expected_prev[2] )
		&& ((Dice2_expected_prev[2] !== last_Dice2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dice2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dice2_expected_prev);
		$display ("     Real value = %b", Dice2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Dice2_exp[2] = Dice2_expected_prev[2];
	end
	if (
		( DIG0_expected_prev[0] !== 1'bx ) && ( DIG0_prev[0] !== DIG0_expected_prev[0] )
		&& ((DIG0_expected_prev[0] !== last_DIG0_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG0_expected_prev);
		$display ("     Real value = %b", DIG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DIG0_exp[0] = DIG0_expected_prev[0];
	end
	if (
		( DIG0_expected_prev[1] !== 1'bx ) && ( DIG0_prev[1] !== DIG0_expected_prev[1] )
		&& ((DIG0_expected_prev[1] !== last_DIG0_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG0_expected_prev);
		$display ("     Real value = %b", DIG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DIG0_exp[1] = DIG0_expected_prev[1];
	end
	if (
		( DIG0_expected_prev[2] !== 1'bx ) && ( DIG0_prev[2] !== DIG0_expected_prev[2] )
		&& ((DIG0_expected_prev[2] !== last_DIG0_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG0_expected_prev);
		$display ("     Real value = %b", DIG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DIG0_exp[2] = DIG0_expected_prev[2];
	end
	if (
		( DIG0_expected_prev[3] !== 1'bx ) && ( DIG0_prev[3] !== DIG0_expected_prev[3] )
		&& ((DIG0_expected_prev[3] !== last_DIG0_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG0_expected_prev);
		$display ("     Real value = %b", DIG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DIG0_exp[3] = DIG0_expected_prev[3];
	end
	if (
		( DIG1_expected_prev[0] !== 1'bx ) && ( DIG1_prev[0] !== DIG1_expected_prev[0] )
		&& ((DIG1_expected_prev[0] !== last_DIG1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG1_expected_prev);
		$display ("     Real value = %b", DIG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DIG1_exp[0] = DIG1_expected_prev[0];
	end
	if (
		( DIG1_expected_prev[1] !== 1'bx ) && ( DIG1_prev[1] !== DIG1_expected_prev[1] )
		&& ((DIG1_expected_prev[1] !== last_DIG1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG1_expected_prev);
		$display ("     Real value = %b", DIG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DIG1_exp[1] = DIG1_expected_prev[1];
	end
	if (
		( DIG1_expected_prev[2] !== 1'bx ) && ( DIG1_prev[2] !== DIG1_expected_prev[2] )
		&& ((DIG1_expected_prev[2] !== last_DIG1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG1_expected_prev);
		$display ("     Real value = %b", DIG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DIG1_exp[2] = DIG1_expected_prev[2];
	end
	if (
		( DIG1_expected_prev[3] !== 1'bx ) && ( DIG1_prev[3] !== DIG1_expected_prev[3] )
		&& ((DIG1_expected_prev[3] !== last_DIG1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG1_expected_prev);
		$display ("     Real value = %b", DIG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DIG1_exp[3] = DIG1_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Problem2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Resetn;
reg Stop1;
reg Stop2;
// wires                                               
wire [2:0] Dice1;
wire [2:0] Dice2;
wire [3:0] DIG0;
wire [3:0] DIG1;

wire sampler;                             

// assign statements (if any)                          
Problem2 i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Dice1(Dice1),
	.Dice2(Dice2),
	.DIG0(DIG0),
	.DIG1(DIG1),
	.Resetn(Resetn),
	.Stop1(Stop1),
	.Stop2(Stop2)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #25000 1'b1;
	#25000;
end 

// Stop1
always
begin
	Stop1 = 1'b0;
	Stop1 = #250000 1'b1;
	#250000;
end 

// Stop2
initial
begin
	Stop2 = 1'b0;
	Stop2 = #375000 1'b1;
	Stop2 = #375000 1'b0;
end 

// Resetn
initial
begin
	Resetn = 1'b1;
	Resetn = #110000 1'b0;
	Resetn = #30000 1'b1;
	Resetn = #690000 1'b0;
	Resetn = #40000 1'b1;
end 

Problem2_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.Resetn(Resetn),
	.Stop1(Stop1),
	.Stop2(Stop2),
	.sampler_tx(sampler)
);

Problem2_vlg_check_tst tb_out(
	.Dice1(Dice1),
	.Dice2(Dice2),
	.DIG0(DIG0),
	.DIG1(DIG1),
	.sampler_rx(sampler)
);
endmodule

