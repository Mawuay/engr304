// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/23/2019 01:16:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ThunderBird
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ThunderBird_vlg_sample_tst(
	clock,
	Lft,
	reset,
	sampler_tx
);
input  clock;
input  Lft;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or Lft or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ThunderBird_vlg_check_tst (
	LeftTurn,
	LeftTurn1,
	LeftTurn2,
	sampler_rx
);
input  LeftTurn;
input  LeftTurn1;
input  LeftTurn2;
input sampler_rx;

reg  LeftTurn_expected;
reg  LeftTurn1_expected;
reg  LeftTurn2_expected;

reg  LeftTurn_prev;
reg  LeftTurn1_prev;
reg  LeftTurn2_prev;

reg  LeftTurn_expected_prev;
reg  LeftTurn1_expected_prev;
reg  LeftTurn2_expected_prev;

reg  last_LeftTurn_exp;
reg  last_LeftTurn1_exp;
reg  last_LeftTurn2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	LeftTurn_prev = LeftTurn;
	LeftTurn1_prev = LeftTurn1;
	LeftTurn2_prev = LeftTurn2;
end

// update expected /o prevs

always @(trigger)
begin
	LeftTurn_expected_prev = LeftTurn_expected;
	LeftTurn1_expected_prev = LeftTurn1_expected;
	LeftTurn2_expected_prev = LeftTurn2_expected;
end



// expected LeftTurn
initial
begin
	LeftTurn_expected = 1'bX;
end 

// expected LeftTurn1
initial
begin
	LeftTurn1_expected = 1'bX;
end 

// expected LeftTurn2
initial
begin
	LeftTurn2_expected = 1'bX;
end 
// generate trigger
always @(LeftTurn_expected or LeftTurn or LeftTurn1_expected or LeftTurn1 or LeftTurn2_expected or LeftTurn2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LeftTurn = %b | expected LeftTurn1 = %b | expected LeftTurn2 = %b | ",LeftTurn_expected_prev,LeftTurn1_expected_prev,LeftTurn2_expected_prev);
	$display("| real LeftTurn = %b | real LeftTurn1 = %b | real LeftTurn2 = %b | ",LeftTurn_prev,LeftTurn1_prev,LeftTurn2_prev);
`endif
	if (
		( LeftTurn_expected_prev !== 1'bx ) && ( LeftTurn_prev !== LeftTurn_expected_prev )
		&& ((LeftTurn_expected_prev !== last_LeftTurn_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LeftTurn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LeftTurn_expected_prev);
		$display ("     Real value = %b", LeftTurn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LeftTurn_exp = LeftTurn_expected_prev;
	end
	if (
		( LeftTurn1_expected_prev !== 1'bx ) && ( LeftTurn1_prev !== LeftTurn1_expected_prev )
		&& ((LeftTurn1_expected_prev !== last_LeftTurn1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LeftTurn1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LeftTurn1_expected_prev);
		$display ("     Real value = %b", LeftTurn1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LeftTurn1_exp = LeftTurn1_expected_prev;
	end
	if (
		( LeftTurn2_expected_prev !== 1'bx ) && ( LeftTurn2_prev !== LeftTurn2_expected_prev )
		&& ((LeftTurn2_expected_prev !== last_LeftTurn2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LeftTurn2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LeftTurn2_expected_prev);
		$display ("     Real value = %b", LeftTurn2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LeftTurn2_exp = LeftTurn2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ThunderBird_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg Lft;
reg reset;
// wires                                               
wire LeftTurn;
wire LeftTurn1;
wire LeftTurn2;

wire sampler;                             

// assign statements (if any)                          
ThunderBird i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.LeftTurn(LeftTurn),
	.LeftTurn1(LeftTurn1),
	.LeftTurn2(LeftTurn2),
	.Lft(Lft),
	.reset(reset)
);

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// Lft
initial
begin
	repeat(6)
	begin
		Lft = 1'b0;
		Lft = #75000 1'b1;
		# 75000;
	end
	Lft = 1'b0;
	Lft = #75000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #50000 1'b1;
end 

ThunderBird_vlg_sample_tst tb_sample (
	.clock(clock),
	.Lft(Lft),
	.reset(reset),
	.sampler_tx(sampler)
);

ThunderBird_vlg_check_tst tb_out(
	.LeftTurn(LeftTurn),
	.LeftTurn1(LeftTurn1),
	.LeftTurn2(LeftTurn2),
	.sampler_rx(sampler)
);
endmodule

